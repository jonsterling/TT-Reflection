tm : type.

crypt : type.
nil : crypt.
cons : crypt -> tm -> crypt.

lookup : crypt -> tm -> type.
lookup/hit : lookup (cons R P) P.
lookup/miss : lookup (cons G Q) P
               <- lookup G P.

quantifier : type.
pi : quantifier.
sigma : quantifier.
intersection : quantifier.
union : quantifier.

univ : tm.
void : tm.
unit : tm.
bool : tm.
eq : tm -> tm -> tm -> tm.

%abbrev ∈ = [M] [A] eq A M M.
%infix left 0 ∈.

ax : tm.
true : tm.
false : tm.
bool-elim : (tm -> tm) -> tm -> tm -> tm -> tm.

quant : quantifier -> tm -> (tm -> tm) -> tm.
lam : (tm -> tm) -> tm.
app : tm -> tm -> tm.

pair : tm -> tm -> tm.
spread : (tm -> tm) -> (tm -> tm -> tm) -> tm -> tm.

reflect : tm -> tm -> tm -> tm.

inf : crypt -> tm -> tm -> type.
chk : crypt -> tm -> tm -> type.
is-true : crypt -> tm -> type.
eval : tm -> tm -> type.
can : tm -> type.

%abbrev ⇓ = eval.
%abbrev λ = lam.
%abbrev @ = app.

%abbrev Π = quant pi.
%abbrev Σ = quant sigma.

%infix left 0 ⇓.
%infix left 0 @.

is-true/unit : is-true R unit.
is-true/lookup : is-true R P
                  <- lookup R P.
% is-true/eval : is-true R P
%                 <- is-true R P′
%                 <- P ⇓ P′.

inf/univ : inf R univ univ.
inf/void : inf R void univ.
inf/unit : inf R unit univ.
inf/ax : inf R ax unit.
inf/true : inf R true bool.
inf/false : inf R false bool.
inf/eq : inf R (eq A M N) univ.
inf/quant : inf R (quant Q A B) univ
             <- chk R A univ
             <- ({x} chk R x A -> chk R (B x) univ).
inf/bool-elim : inf R (bool-elim C M N X) (C X)
                 <- chk R X bool
                 <- ({x} chk R x bool -> chk R (C x) univ)
                 <- chk R M (C false)
                 <- chk R M (C true).
inf/spread : inf R (spread C M P) (C P)
              <- inf R P (Σ A B)
              <- ({u} chk R u (Σ A B) -> chk R (C u) univ)
              <- ({v} {w} chk R v A -> chk R w (B v) -> chk R (M v w) (C (pair v w))).
inf/app : chk R (M @ N) (B N)
           <- inf R M (Π A B)
           <- chk R N A.


chk/is-true : chk R M A
               <- is-true R (M ∈ A).
chk/inf : chk R M A
           <- inf R M A.
chk/lam : chk R (λ M) (Π A B)
           <- ({x} chk R x A -> chk R (M x) (B x)).
chk/pair : chk R (pair M N) (Σ A B)
            <- chk R N (B M)
            <- chk R M A.
chk/reflect : chk R (reflect T M N) A
               <- chk (cons R T) N A
               <- chk R M T.
chk/union : chk R M (quant union A B)
             <- is-true R (Σ A [x] (M ∈ (B x))).
chk/intersection : chk R M (quant intersection A B)
                    <- is-true R (Π A [x] (M ∈ B x)).
chk/eval/tm : chk R M A
               <- chk R M′ A
               <- M ⇓ M′.
chk/eval/ty : chk R M A
               <- chk R M A′
               <- A ⇓ A′.

can/univ : can univ.
can/void : can void.
can/unit : can unit.
can/bool : can bool.
can/ax : can ax.
can/true : can true.
can/false : can false.
can/quant : can (quant Q A B)
             <- can A
             <- {x} can (B x).
can/lam : can (λ M)
           <- {x} can (M x).
can/pair : can (pair M N)
            <- can M
            <- can N.

eval/can : M ⇓ M
            <- can M.
eval/bool-elim : (bool-elim C M N X) ⇓ (bool-elim C M N X′)
                  <- X ⇓ X′.
eval/bool-elim/true : (bool-elim _ M _ true) ⇓ M.
eval/bool-elim/false : (bool-elim _ _ N false) ⇓ N.

eval/pair : (pair M N) ⇓ (pair M′ N′)
             <- N ⇓ N′
             <- M ⇓ M′.
eval/spread : (spread _ M P) ⇓ M X Y
               <- P ⇓ pair X Y.

eval/app : M @ N ⇓ O
            <- M ⇓ λ E
            <- E N ⇓ O.

eval/eq/unit : (eq A M N) ⇓ unit
                <- N ⇓ ax
                <- M ⇓ ax
                <- A ⇓ unit.
eval/eq/def : (eq A M N) ⇓ unit
               <- chk nil B A′
               <- A ⇓ A′
               <- N ⇓ B
               <- M ⇓ B.
                        
eval/eq : (eq A M N) ⇓ (eq A′ M′ N′)
           <- N ⇓ N′
           <- M ⇓ M′
           <- A ⇓ A′.
eval/cut : M ⇓ O
            <- N ⇓ O
            <- M ⇓ N.

%solve _ : chk nil (λ[A] λ[x] x) (Π univ [A] Π A [x] A).
%solve test2 : chk nil ax unit.

%solve lem/eval/ax-in-unit : (eq unit ax ax) ⇓ unit.

test3
   : chk nil (reflect (Π unit [x] ax ∈ unit) (λ[x] ax) ax) (quant intersection unit [x] unit)
      = chk/reflect
         (chk/lam [_] [_]
            (chk/eval/ty lem/eval/ax-in-unit (chk/inf inf/ax)))
         (chk/intersection (is-true/lookup lookup/hit)).

so = bool-elim ([_] univ) unit void.

test4
   : chk nil (reflect (Σ bool [x] (ax ∈ so x)) (pair true ax) ax) (quant union bool so)
      = chk/reflect
         (chk/pair
            (chk/inf inf/true)
            (chk/eval/ty
               (eval/eq/unit
                  eval/bool-elim/true
                  (eval/can can/ax)
                  (eval/can can/ax))
               (chk/inf inf/ax)))
         (chk/union (is-true/lookup lookup/hit)).

welp = bool-elim ([_] univ) (true ∈ bool) (false ∈ bool).

test5
   : chk nil (reflect (Π bool [x] ax ∈ (welp x)) (λ[x] bool-elim ([z] ax ∈ (welp z)) ax ax x) ax) (quant intersection bool welp)
      = chk/reflect
         (chk/lam [z] [zz]
            (chk/inf
               (inf/bool-elim
                  (chk/eval/ty
                     (eval/eq
                        (eval/bool-elim/true)
                        (eval/can can/ax)
                        (eval/can can/ax)
                        )
                     (chk/eval/ty
                        (eval/eq/def
                           (eval/can can/ax)
                           (eval/can can/ax)
                           (eval/eq/def 
                              (eval/can can/true)
                              (eval/can can/true)
                              (eval/can can/bool)
                              (chk/inf inf/true)
                              )
                           (chk/inf inf/ax))
                        (chk/inf inf/ax)))
                  
                  (chk/eval/ty
                     (eval/eq/def
                        (eval/can can/ax)
                        (eval/can can/ax)
                        (eval/cut
                           (eval/bool-elim/false)
                           (eval/eq/def
                              (eval/can can/false)
                              (eval/can can/false)
                              (eval/can can/bool)
                              (chk/inf inf/false)))
                        (chk/inf inf/ax))
                     (chk/inf inf/ax))
                  ([_][_] chk/inf inf/eq)
                  zz)))
         (chk/intersection (is-true/lookup lookup/hit)).
         
        
